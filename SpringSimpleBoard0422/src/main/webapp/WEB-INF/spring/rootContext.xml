<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- connection 만들어주는 것 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="SPRING" />
		<property name="password" value="spring" />
	</bean>

	<!-- sqlSessionFactory Mybatis가 Database랑 연동하도록 설정 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis.xml"></property>
	</bean>

	<!-- MyBatis의 CRUD 템플릿을 사용할 수 있도록 설정 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<!--생성자 -->
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<!-- 트랜젝션 설정하기 -->
	<!-- 트랜젝션 매니저 설정, 통채로 commit/roll back을 관리하겠다는 의미 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 트랜젝션 대상 설정하기 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- method를 적는 곳, CRUD와 관련된 것은 모두 적어주면 된다 -->
		<tx:attributes>
			<!-- tx를 주면 모든 것이 다 걸리게 가능하다 -->
			<tx:method name="tx*" rollback-for="RuntimeException" />

			<tx:method name="insert*" rollback-for="RuntimeException" />
			<tx:method name="wrtie*" rollback-for="RuntimeException" />
			<tx:method name="add*" rollback-for="RuntimeException" />
			<tx:method name="create*" rollback-for="RuntimeException" />
			<tx:method name="regist*" rollback-for="RuntimeException" />
			<tx:method name="set*" rollback-for="RuntimeException" />

			<tx:method name="update*" rollback-for="RuntimeException" />
			<tx:method name="modify*" rollback-for="RuntimeException" />
			<tx:method name="edit*" rollback-for="RuntimeException" />
			<tx:method name="change*" rollback-for="RuntimeException" />

			<tx:method name="delete*" rollback-for="RuntimeException" />
			<tx:method name="remove*" rollback-for="RuntimeException" />
			<tx:method name="terminate*" rollback-for="RuntimeException" />

			<!-- read, select, get에서 read이외의 다른 것이 처리되는 것을 막는 것 -->
			<tx:method name="read*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(public * com.ktds.leina..service.*.*(..))" id="controllerTx"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="controllerTx"/>
	</aop:config>

</beans>
