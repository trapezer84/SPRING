<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	id="WebApp_ID" version="3.1">
	<display-name>FinalSpring</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>

	<!--
		Spring MVC는 Single Servlet Framework 이다.
		이 하나의 Servlet은 DispatcherServlet 이라 부르고
		이 Servlet 은 여러개의 Controller 와 통신한다.
		
		DispatcherServlet 은 사용자의 요청을 가장 먼저 받는 Servlet 이다.
	-->
	<servlet>
		<servlet-name>springDispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--
			DispatcherServlet은 URL에 관련된 설정들이 필요함.
			ViewResolver, CommonsMultipartResolver, Controller 등의
			URL과 관련된 설정들을 가지고 있다.
			이런 설정을 가지고 있는 파일의 기본 이름은
			applicationContext.xml 이고,
			이 파일이 위치한 경로는
			/WEB-INF/spring/applicationContext.xml 이다.
			
			Default로는
			/WEB-INF/applicationContext.xml 인데, 설정파일의
			관리 편의성을 위해 spring 같은 폴더를 만들어서 관리한다.
		-->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- 
				param-value 는 여러 개의 xml 파일을 한번에 가져올 수 있다.
				예를 들어, applicationContext 에는
				ViewResolver, CommonsMultipartResolver 만 설정하고
				controllerContext.xml 이라는 파일에는
				Controller 설정만 관리하고 싶을 때
				param-value 값에 [엔터]를 치고 
				/WEB-INF/spring/controllerContext.xml 을
				추가로 입력하면 된다.
				설정 예 :
				<param-value>
					/WEB-INF/spring/applicationContext.xml
					/WEB-INF/spring/controllerContext.xml
				</param-value>
			-->
			<param-value>
				/WEB-INF/spring/applicationContext.xml
				/WEB-INF/spring/controllersContext.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- 
		Spring MVC 를 사용하면 아래와 같은 URL Pattern을 가진다.
		http://localhost:8080/ContextPath/member/login
		http://localhost:8080/ContextPath/member/logout
		http://localhost:8080/ContextPath/board/list
		
		위 URL에서 /member/login, /member/logout, /board/list 는
		파라미터에 해당된다.
		즉, 요청하는 URL 정보는
		http://localhost:8080/ContextPath 이 주소 외에는
		아무런 값이 들어오지 않는다고 봐야한다.
		
		위 주소로 요청될 경우 [springDispatcherServlet]
		이라는 이름을 가진 Servlet 이 처리하도록 한다.
	-->
	<servlet-mapping>
		<servlet-name>springDispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	
	<!-- 
		contextConfigLocation 이라는 이름으로
		application 상수를 생성한다.
		param-value 에는 service, dao, database 관련되는 여러 설정들을
		가지고 있는 *Context.xml 파일들을 넣어준다.
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/*Context.xml</param-value>
	</context-param>

	<!--
		DispatcherServlet이 초기화 된 이후에 실행된다.
		Bean Container 에 추가로 로딩할 Bean 이 있다면
		Context 파일을 읽어와서 Bean을 생성한다.
		
		Context File을 읽어오는 경로는
		contextConfigLocation Application 상수의 값으로 정의되어 있다. 
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 
		영어권을 제외한 모든 나라에 서비스할 경우,
		그리고 글로벌 서비스를 할 경우 (다국어지원)
		모든 문자를 UTF-8로 변경할 필요가 있다.
		
		모든 페이지에서 
		HttpServletReqeust.setCharacterEncoding("UTF-8");
		을 사용하기에는 많은 공수가 필요하고 수정의 불편함이 존재한다.
		
		이런 문제는 Spring에서 지원해주는 EncodingFilter를 사용해서
		해결한다.
		
		Filter 는 DispatcherServlet이 요청을 전달받기 전에
		실행되는데, Filter에서 모든 요청을 받아 
		Encoding을 UTF-8로 변경한 다음 DispatcherServlet으로 전달한다.
	-->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<!-- 
		characterEncodingFilter가 모든 요청에 대해서
		Encoding을 변경해주기 위해서는 url-pattern을
		/* 로 변경을 해주어야 한다.
	-->
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 
		모든 요청에 대해서 어떤 Decorator를 적용할지
		PageFilter 에서 정한다.
	-->
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>
			com.opensymphony.module.sitemesh.filter.PageFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<!-- 
		http://ko.wikipedia.org/wiki/HTTP_상태_코드
		
		서버에서 처리 중 아래 정의된 특정 에러가 발생할 경우
		지정한 에러페이지를 보여준다.
		
		이 때, 에러페이지에는 접속한 유저의 권한에 따라서
		보여주는 페이지의 내용이 달라야 한다.
		
		일반 유저일 경우 "치명적 에러가 발생했습니다" 혹은
		"관리자에게 문의하세요" 등 "가이드"성 문구를 보여주어야 하고
		
		관리자일 경우 발생한 에러의 Message를 보여주고 개발자에게
		문의하라는 문구를 보여주어야 한다.
		
		마지막으로 개발자일 경우 Message 전체와 Trace 전체를 보여주고
		개발자가 에러를 분석할 수 있도록 해주어야 한다.
	-->
	<error-page>
		<error-code>400</error-code>
		<location>/WEB-INF/view/error/400.jsp</location>
	</error-page>
	<error-page>
		<error-code>401</error-code>
		<location>/WEB-INF/view/error/401.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/WEB-INF/view/error/403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/view/error/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/view/error/500.jsp</location>
	</error-page>
	<error-page>
		<error-code>502</error-code>
		<location>/WEB-INF/view/error/502.jsp</location>
	</error-page>
	<error-page>
		<error-code>503</error-code>
		<location>/WEB-INF/view/error/503.jsp</location>
	</error-page>
	
	
	
	
	
	
	
</web-app>